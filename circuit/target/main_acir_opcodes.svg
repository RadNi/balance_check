<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="238" onload="init(evt)" viewBox="0 0 1200 238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = true;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="238" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Artifact: ./target/balance_check.json, Function: main</text><text id="details" fill="rgb(0,0,0)" x="10" y="221.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="221.00"> </text><svg id="frames" x="10" width="1180" total_samples="140428"><g><title>acir::blackbox::range (1,715 opcodes, 1.22%)</title><rect x="0.0000%" y="157" width="1.2213%" height="23" fill="rgb(255,233,233)" fg:x="0" fg:w="1715"/><text x="0.2500%" y="171.50"></text></g><g><title>acir::arithmetic (15 opcodes, 0.01%)</title><rect x="1.2213%" y="109" width="0.0107%" height="23" fill="rgb(255,248,248)" fg:x="1715" fg:w="15"/><text x="1.4713%" y="123.50"></text></g><g><title>acir::blackbox::range (12 opcodes, 0.01%)</title><rect x="1.2319%" y="109" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="1730" fg:w="12"/><text x="1.4819%" y="123.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="1.2405%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="1742" fg:w="3"/><text x="1.4905%" y="123.50"></text></g><g><title>keccak256.nr:52:28::sliced as u64 (33 opcodes, 0.02%)</title><rect x="1.2213%" y="133" width="0.0235%" height="23" fill="rgb(255,247,247)" fg:x="1715" fg:w="33"/><text x="1.4713%" y="147.50"></text></g><g><title>acir::brillig_call(3) (3 opcodes, 0.00%)</title><rect x="1.2426%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="1745" fg:w="3"/><text x="1.4926%" y="123.50"></text></g><g><title>keccak256.nr:79:17::keccakf1600(state) (1 opcodes, 0.00%)</title><rect x="1.2448%" y="133" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="1748" fg:w="1"/><text x="1.4948%" y="147.50"></text></g><g><title>mod.nr:23:9::super::keccakf1600(input) (1 opcodes, 0.00%)</title><rect x="1.2448%" y="109" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="1748" fg:w="1"/><text x="1.4948%" y="123.50"></text></g><g><title>acir::blackbox::keccakf1600 (1 opcodes, 0.00%)</title><rect x="1.2448%" y="85" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="1748" fg:w="1"/><text x="1.4948%" y="99.50"></text></g><g><title>acir::arithmetic (4 opcodes, 0.00%)</title><rect x="1.2455%" y="61" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="1749" fg:w="4"/><text x="1.4955%" y="75.50"></text></g><g><title>acir::blackbox::range (32 opcodes, 0.02%)</title><rect x="1.2483%" y="61" width="0.0228%" height="23" fill="rgb(255,247,247)" fg:x="1753" fg:w="32"/><text x="1.4983%" y="75.50"></text></g><g><title>main.nr:126:23::keccak256::keccak256(account.address, 20) (74 opcodes, 0.05%)</title><rect x="1.2213%" y="157" width="0.0527%" height="23" fill="rgb(255,246,246)" fg:x="1715" fg:w="74"/><text x="1.4713%" y="171.50"></text></g><g><title>keccak256.nr:94:32::lane.to_le_bytes (40 opcodes, 0.03%)</title><rect x="1.2455%" y="133" width="0.0285%" height="23" fill="rgb(255,247,247)" fg:x="1749" fg:w="40"/><text x="1.4955%" y="147.50"></text></g><g><title>mod.nr:101:21::self.to_le_radix (40 opcodes, 0.03%)</title><rect x="1.2455%" y="109" width="0.0285%" height="23" fill="rgb(255,247,247)" fg:x="1749" fg:w="40"/><text x="1.4955%" y="123.50"></text></g><g><title>mod.nr:165:9::__to_le_radix(self, radix) (40 opcodes, 0.03%)</title><rect x="1.2455%" y="85" width="0.0285%" height="23" fill="rgb(255,247,247)" fg:x="1749" fg:w="40"/><text x="1.4955%" y="99.50"></text></g><g><title>acir::brillig_call(4) (4 opcodes, 0.00%)</title><rect x="1.2711%" y="61" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="1785" fg:w="4"/><text x="1.5211%" y="75.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="1.2740%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="1789" fg:w="3"/><text x="1.5240%" y="147.50"></text></g><g><title>acir::blackbox::range (6 opcodes, 0.00%)</title><rect x="1.2761%" y="133" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="1792" fg:w="6"/><text x="1.5261%" y="147.50"></text></g><g><title>main.nr:130:13::i &lt; node_length (12 opcodes, 0.01%)</title><rect x="1.2740%" y="157" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="1789" fg:w="12"/><text x="1.5240%" y="171.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="1.2804%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="1798" fg:w="3"/><text x="1.5304%" y="147.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="1.2825%" y="133" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="1801" fg:w="6"/><text x="1.5325%" y="147.50"></text></g><g><title>main.nr:131:16::nodes[i].node_type == 0 (9 opcodes, 0.01%)</title><rect x="1.2825%" y="157" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="1801" fg:w="9"/><text x="1.5325%" y="171.50"></text></g><g><title>acir::brillig_call(3) (3 opcodes, 0.00%)</title><rect x="1.2868%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="1807" fg:w="3"/><text x="1.5368%" y="147.50"></text></g><g><title>main.nr:26:12::node.row_exist[i] (3 opcodes, 0.00%)</title><rect x="1.2889%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="1810" fg:w="3"/><text x="1.5389%" y="147.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="1.2889%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="1810" fg:w="3"/><text x="1.5389%" y="123.50"></text></g><g><title>acir::arithmetic (225 opcodes, 0.16%)</title><rect x="1.2911%" y="109" width="0.1602%" height="23" fill="rgb(255,244,244)" fg:x="1813" fg:w="225"/><text x="1.5411%" y="123.50"></text></g><g><title>acir::blackbox::range (90 opcodes, 0.06%)</title><rect x="1.4513%" y="109" width="0.0641%" height="23" fill="rgb(255,246,246)" fg:x="2038" fg:w="90"/><text x="1.7013%" y="123.50"></text></g><g><title>main.nr:27:16::len2 &gt; 255 - 33 (360 opcodes, 0.26%)</title><rect x="1.2911%" y="133" width="0.2564%" height="23" fill="rgb(255,242,242)" fg:x="1813" fg:w="360"/><text x="1.5411%" y="147.50"></text></g><g><title>acir::brillig_call(2) (45 opcodes, 0.03%)</title><rect x="1.5154%" y="109" width="0.0320%" height="23" fill="rgb(255,247,247)" fg:x="2128" fg:w="45"/><text x="1.7654%" y="123.50"></text></g><g><title>acir::arithmetic (294 opcodes, 0.21%)</title><rect x="1.5474%" y="109" width="0.2094%" height="23" fill="rgb(255,243,243)" fg:x="2173" fg:w="294"/><text x="1.7974%" y="123.50"></text></g><g><title>main.nr:28:17::len1 += 1 (336 opcodes, 0.24%)</title><rect x="1.5474%" y="133" width="0.2393%" height="23" fill="rgb(255,242,242)" fg:x="2173" fg:w="336"/><text x="1.7974%" y="147.50"></text></g><g><title>acir::blackbox::range (42 opcodes, 0.03%)</title><rect x="1.7568%" y="109" width="0.0299%" height="23" fill="rgb(255,247,247)" fg:x="2467" fg:w="42"/><text x="2.0068%" y="123.50"></text></g><g><title>acir::arithmetic (141 opcodes, 0.10%)</title><rect x="1.7867%" y="109" width="0.1004%" height="23" fill="rgb(255,245,245)" fg:x="2509" fg:w="141"/><text x="2.0367%" y="123.50"></text></g><g><title>main.nr:29:24::len2 - 223 (186 opcodes, 0.13%)</title><rect x="1.7867%" y="133" width="0.1325%" height="23" fill="rgb(255,244,244)" fg:x="2509" fg:w="186"/><text x="2.0367%" y="147.50"></text></g><g><title>acir::blackbox::range (45 opcodes, 0.03%)</title><rect x="1.8871%" y="109" width="0.0320%" height="23" fill="rgb(255,247,247)" fg:x="2650" fg:w="45"/><text x="2.1371%" y="123.50"></text></g><g><title>acir::arithmetic (315 opcodes, 0.22%)</title><rect x="1.9191%" y="109" width="0.2243%" height="23" fill="rgb(255,242,242)" fg:x="2695" fg:w="315"/><text x="2.1691%" y="123.50"></text></g><g><title>main.nr:31:17::len2 += 33 (360 opcodes, 0.26%)</title><rect x="1.9191%" y="133" width="0.2564%" height="23" fill="rgb(255,242,242)" fg:x="2695" fg:w="360"/><text x="2.1691%" y="147.50"></text></g><g><title>acir::blackbox::range (45 opcodes, 0.03%)</title><rect x="2.1434%" y="109" width="0.0320%" height="23" fill="rgb(255,247,247)" fg:x="3010" fg:w="45"/><text x="2.3934%" y="123.50"></text></g><g><title>acir::arithmetic (270 opcodes, 0.19%)</title><rect x="2.1755%" y="109" width="0.1923%" height="23" fill="rgb(255,243,243)" fg:x="3055" fg:w="270"/><text x="2.4255%" y="123.50"></text></g><g><title>main.nr:34:16::len2 == 255 (315 opcodes, 0.22%)</title><rect x="2.1755%" y="133" width="0.2243%" height="23" fill="rgb(255,242,242)" fg:x="3055" fg:w="315"/><text x="2.4255%" y="147.50"></text></g><g><title>acir::brillig_call(3) (45 opcodes, 0.03%)</title><rect x="2.3678%" y="109" width="0.0320%" height="23" fill="rgb(255,247,247)" fg:x="3325" fg:w="45"/><text x="2.6178%" y="123.50"></text></g><g><title>main.nr:35:24::0 (90 opcodes, 0.06%)</title><rect x="2.3998%" y="133" width="0.0641%" height="23" fill="rgb(255,246,246)" fg:x="3370" fg:w="90"/><text x="2.6498%" y="147.50"></text></g><g><title>acir::arithmetic (90 opcodes, 0.06%)</title><rect x="2.3998%" y="109" width="0.0641%" height="23" fill="rgb(255,246,246)" fg:x="3370" fg:w="90"/><text x="2.6498%" y="123.50"></text></g><g><title>acir::arithmetic (252 opcodes, 0.18%)</title><rect x="2.4639%" y="109" width="0.1795%" height="23" fill="rgb(255,243,243)" fg:x="3460" fg:w="252"/><text x="2.7139%" y="123.50"></text></g><g><title>main.nr:36:17::len1 += 1 (294 opcodes, 0.21%)</title><rect x="2.4639%" y="133" width="0.2094%" height="23" fill="rgb(255,243,243)" fg:x="3460" fg:w="294"/><text x="2.7139%" y="147.50"></text></g><g><title>acir::blackbox::range (42 opcodes, 0.03%)</title><rect x="2.6433%" y="109" width="0.0299%" height="23" fill="rgb(255,247,247)" fg:x="3712" fg:w="42"/><text x="2.8933%" y="123.50"></text></g><g><title>acir::arithmetic (231 opcodes, 0.16%)</title><rect x="2.6733%" y="109" width="0.1645%" height="23" fill="rgb(255,243,243)" fg:x="3754" fg:w="231"/><text x="2.9233%" y="123.50"></text></g><g><title>main.nr:38:17::len2 += 1 (276 opcodes, 0.20%)</title><rect x="2.6733%" y="133" width="0.1965%" height="23" fill="rgb(255,243,243)" fg:x="3754" fg:w="276"/><text x="2.9233%" y="147.50"></text></g><g><title>acir::blackbox::range (45 opcodes, 0.03%)</title><rect x="2.8378%" y="109" width="0.0320%" height="23" fill="rgb(255,247,247)" fg:x="3985" fg:w="45"/><text x="3.0878%" y="123.50"></text></g><g><title>acir::arithmetic (15 opcodes, 0.01%)</title><rect x="2.8698%" y="109" width="0.0107%" height="23" fill="rgb(255,248,248)" fg:x="4030" fg:w="15"/><text x="3.1198%" y="123.50"></text></g><g><title>main.nr:42:8::len2 == 255 (18 opcodes, 0.01%)</title><rect x="2.8698%" y="133" width="0.0128%" height="23" fill="rgb(255,248,248)" fg:x="4030" fg:w="18"/><text x="3.1198%" y="147.50"></text></g><g><title>acir::brillig_call(3) (3 opcodes, 0.00%)</title><rect x="2.8805%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4045" fg:w="3"/><text x="3.1305%" y="123.50"></text></g><g><title>main.nr:43:16::0 (6 opcodes, 0.00%)</title><rect x="2.8826%" y="133" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="4048" fg:w="6"/><text x="3.1326%" y="147.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="2.8826%" y="109" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="4048" fg:w="6"/><text x="3.1326%" y="123.50"></text></g><g><title>acir::arithmetic (27 opcodes, 0.02%)</title><rect x="2.8869%" y="109" width="0.0192%" height="23" fill="rgb(255,247,247)" fg:x="4054" fg:w="27"/><text x="3.1369%" y="123.50"></text></g><g><title>main.nr:44:9::len1 += 1 (30 opcodes, 0.02%)</title><rect x="2.8869%" y="133" width="0.0214%" height="23" fill="rgb(255,247,247)" fg:x="4054" fg:w="30"/><text x="3.1369%" y="147.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="2.9061%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4081" fg:w="3"/><text x="3.1561%" y="123.50"></text></g><g><title>acir::arithmetic (21 opcodes, 0.01%)</title><rect x="2.9083%" y="109" width="0.0150%" height="23" fill="rgb(255,248,248)" fg:x="4084" fg:w="21"/><text x="3.1583%" y="123.50"></text></g><g><title>main.nr:46:9::len2 += 1 (24 opcodes, 0.02%)</title><rect x="2.9083%" y="133" width="0.0171%" height="23" fill="rgb(255,248,248)" fg:x="4084" fg:w="24"/><text x="3.1583%" y="147.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="2.9232%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4105" fg:w="3"/><text x="3.1732%" y="123.50"></text></g><g><title>acir::arithmetic (9 opcodes, 0.01%)</title><rect x="2.9253%" y="109" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="4108" fg:w="9"/><text x="3.1753%" y="123.50"></text></g><g><title>acir::blackbox::range (6 opcodes, 0.00%)</title><rect x="2.9318%" y="109" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="4117" fg:w="6"/><text x="3.1818%" y="123.50"></text></g><g><title>main.nr:48:23::len2 &lt;= 55 (18 opcodes, 0.01%)</title><rect x="2.9253%" y="133" width="0.0128%" height="23" fill="rgb(255,248,248)" fg:x="4108" fg:w="18"/><text x="3.1753%" y="147.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="2.9360%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4123" fg:w="3"/><text x="3.1860%" y="123.50"></text></g><g><title>main.nr:48:8::(len1 == 0) &amp; (len2 &lt;= 55) (3 opcodes, 0.00%)</title><rect x="2.9382%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4126" fg:w="3"/><text x="3.1882%" y="147.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="2.9382%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4126" fg:w="3"/><text x="3.1882%" y="123.50"></text></g><g><title>acir::arithmetic (15 opcodes, 0.01%)</title><rect x="2.9403%" y="109" width="0.0107%" height="23" fill="rgb(255,248,248)" fg:x="4129" fg:w="15"/><text x="3.1903%" y="123.50"></text></g><g><title>main.nr:48:9::len1 == 0 (18 opcodes, 0.01%)</title><rect x="2.9403%" y="133" width="0.0128%" height="23" fill="rgb(255,248,248)" fg:x="4129" fg:w="18"/><text x="3.1903%" y="147.50"></text></g><g><title>acir::brillig_call(3) (3 opcodes, 0.00%)</title><rect x="2.9510%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4144" fg:w="3"/><text x="3.2010%" y="123.50"></text></g><g><title>acir::arithmetic (24 opcodes, 0.02%)</title><rect x="2.9531%" y="109" width="0.0171%" height="23" fill="rgb(255,248,248)" fg:x="4147" fg:w="24"/><text x="3.2031%" y="123.50"></text></g><g><title>main.nr:49:26::0xc0 + len2 (27 opcodes, 0.02%)</title><rect x="2.9531%" y="133" width="0.0192%" height="23" fill="rgb(255,247,247)" fg:x="4147" fg:w="27"/><text x="3.2031%" y="147.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="2.9702%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4171" fg:w="3"/><text x="3.2202%" y="123.50"></text></g><g><title>main.nr:51:15::len1 == 0 (3 opcodes, 0.00%)</title><rect x="2.9723%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4174" fg:w="3"/><text x="3.2223%" y="147.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="2.9723%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4174" fg:w="3"/><text x="3.2223%" y="123.50"></text></g><g><title>main.nr:62:9::index += 1 (3 opcodes, 0.00%)</title><rect x="2.9745%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4177" fg:w="3"/><text x="3.2245%" y="147.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="2.9745%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="4177" fg:w="3"/><text x="3.2245%" y="123.50"></text></g><g><title>acir::arithmetic (24,094 opcodes, 17.16%)</title><rect x="2.9766%" y="109" width="17.1575%" height="23" fill="rgb(255,187,187)" fg:x="4180" fg:w="24094"/><text x="3.2266%" y="123.50">acir::arithmetic</text></g><g><title>acir::memory::init (48 opcodes, 0.03%)</title><rect x="20.1342%" y="109" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="28274" fg:w="48"/><text x="20.3842%" y="123.50"></text></g><g><title>main.nr:67:13::encoded[index] (24,238 opcodes, 17.26%)</title><rect x="2.9766%" y="133" width="17.2601%" height="23" fill="rgb(255,187,187)" fg:x="4180" fg:w="24238"/><text x="3.2266%" y="147.50">main.nr:67:13::encoded[inde..</text></g><g><title>acir::memory::op (96 opcodes, 0.07%)</title><rect x="20.1683%" y="109" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="28322" fg:w="96"/><text x="20.4183%" y="123.50"></text></g><g><title>acir::arithmetic (192 opcodes, 0.14%)</title><rect x="20.2367%" y="109" width="0.1367%" height="23" fill="rgb(255,244,244)" fg:x="28418" fg:w="192"/><text x="20.4867%" y="123.50"></text></g><g><title>acir::blackbox::range (96 opcodes, 0.07%)</title><rect x="20.3734%" y="109" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="28610" fg:w="96"/><text x="20.6234%" y="123.50"></text></g><g><title>main.nr:67:30::0xa0 (336 opcodes, 0.24%)</title><rect x="20.2367%" y="133" width="0.2393%" height="23" fill="rgb(255,242,242)" fg:x="28418" fg:w="336"/><text x="20.4867%" y="147.50"></text></g><g><title>acir::brillig_call(2) (48 opcodes, 0.03%)</title><rect x="20.4418%" y="109" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="28706" fg:w="48"/><text x="20.6918%" y="123.50"></text></g><g><title>acir::arithmetic (96 opcodes, 0.07%)</title><rect x="20.4760%" y="109" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="28754" fg:w="96"/><text x="20.7260%" y="123.50"></text></g><g><title>main.nr:68:13::index += 1 (144 opcodes, 0.10%)</title><rect x="20.4760%" y="133" width="0.1025%" height="23" fill="rgb(255,245,245)" fg:x="28754" fg:w="144"/><text x="20.7260%" y="147.50"></text></g><g><title>acir::blackbox::range (48 opcodes, 0.03%)</title><rect x="20.5443%" y="109" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="28850" fg:w="48"/><text x="20.7943%" y="123.50"></text></g><g><title>acir::arithmetic (3,606 opcodes, 2.57%)</title><rect x="20.5785%" y="109" width="2.5679%" height="23" fill="rgb(255,226,226)" fg:x="28898" fg:w="3606"/><text x="20.8285%" y="123.50">ac..</text></g><g><title>main.nr:70:17::encoded[index] (32,214 opcodes, 22.94%)</title><rect x="20.5785%" y="133" width="22.9399%" height="23" fill="rgb(255,178,178)" fg:x="28898" fg:w="32214"/><text x="20.8285%" y="147.50">main.nr:70:17::encoded[index]</text></g><g><title>acir::memory::op (28,608 opcodes, 20.37%)</title><rect x="23.1464%" y="109" width="20.3720%" height="23" fill="rgb(255,182,182)" fg:x="32504" fg:w="28608"/><text x="23.3964%" y="123.50">acir::memory::op</text></g><g><title>acir::arithmetic (3,072 opcodes, 2.19%)</title><rect x="43.5184%" y="109" width="2.1876%" height="23" fill="rgb(255,227,227)" fg:x="61112" fg:w="3072"/><text x="43.7684%" y="123.50">a..</text></g><g><title>acir::blackbox::range (3,072 opcodes, 2.19%)</title><rect x="45.7060%" y="109" width="2.1876%" height="23" fill="rgb(255,227,227)" fg:x="64184" fg:w="3072"/><text x="45.9560%" y="123.50">a..</text></g><g><title>main.nr:70:34::node.rows[i][j] (7,680 opcodes, 5.47%)</title><rect x="43.5184%" y="133" width="5.4690%" height="23" fill="rgb(255,214,214)" fg:x="61112" fg:w="7680"/><text x="43.7684%" y="147.50">main.nr..</text></g><g><title>acir::brillig_call(2) (1,536 opcodes, 1.09%)</title><rect x="47.8936%" y="109" width="1.0938%" height="23" fill="rgb(255,234,234)" fg:x="67256" fg:w="1536"/><text x="48.1436%" y="123.50"></text></g><g><title>acir::arithmetic (1,629 opcodes, 1.16%)</title><rect x="48.9874%" y="109" width="1.1600%" height="23" fill="rgb(255,233,233)" fg:x="68792" fg:w="1629"/><text x="49.2374%" y="123.50"></text></g><g><title>main.nr:71:17::index += 1 (3,165 opcodes, 2.25%)</title><rect x="48.9874%" y="133" width="2.2538%" height="23" fill="rgb(255,227,227)" fg:x="68792" fg:w="3165"/><text x="49.2374%" y="147.50">m..</text></g><g><title>acir::blackbox::range (1,536 opcodes, 1.09%)</title><rect x="50.1474%" y="109" width="1.0938%" height="23" fill="rgb(255,234,234)" fg:x="70421" fg:w="1536"/><text x="50.3974%" y="123.50"></text></g><g><title>acir::arithmetic (25,680 opcodes, 18.29%)</title><rect x="51.2412%" y="109" width="18.2870%" height="23" fill="rgb(255,185,185)" fg:x="71957" fg:w="25680"/><text x="51.4912%" y="123.50">acir::arithmetic</text></g><g><title>acir::memory::init (48 opcodes, 0.03%)</title><rect x="69.5282%" y="109" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="97637" fg:w="48"/><text x="69.7782%" y="123.50"></text></g><g><title>main.nr:74:13::encoded[index] (51,360 opcodes, 36.57%)</title><rect x="51.2412%" y="133" width="36.5739%" height="23" fill="rgb(255,159,159)" fg:x="71957" fg:w="51360"/><text x="51.4912%" y="147.50">main.nr:74:13::encoded[index]</text></g><g><title>acir::memory::op (25,632 opcodes, 18.25%)</title><rect x="69.5623%" y="109" width="18.2528%" height="23" fill="rgb(255,185,185)" fg:x="97685" fg:w="25632"/><text x="69.8123%" y="123.50">acir::memory::op</text></g><g><title>acir::arithmetic (198 opcodes, 0.14%)</title><rect x="87.8151%" y="109" width="0.1410%" height="23" fill="rgb(255,244,244)" fg:x="123317" fg:w="198"/><text x="88.0651%" y="123.50"></text></g><g><title>acir::blackbox::range (96 opcodes, 0.07%)</title><rect x="87.9561%" y="109" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="123515" fg:w="96"/><text x="88.2061%" y="123.50"></text></g><g><title>main.nr:74:30::0x80 (342 opcodes, 0.24%)</title><rect x="87.8151%" y="133" width="0.2435%" height="23" fill="rgb(255,242,242)" fg:x="123317" fg:w="342"/><text x="88.0651%" y="147.50"></text></g><g><title>acir::brillig_call(2) (48 opcodes, 0.03%)</title><rect x="88.0245%" y="109" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="123611" fg:w="48"/><text x="88.2745%" y="123.50"></text></g><g><title>acir::arithmetic (189 opcodes, 0.13%)</title><rect x="88.0586%" y="109" width="0.1346%" height="23" fill="rgb(255,244,244)" fg:x="123659" fg:w="189"/><text x="88.3086%" y="123.50"></text></g><g><title>main.nr:75:13::index += 1 (237 opcodes, 0.17%)</title><rect x="88.0586%" y="133" width="0.1688%" height="23" fill="rgb(255,243,243)" fg:x="123659" fg:w="237"/><text x="88.3086%" y="147.50"></text></g><g><title>acir::blackbox::range (48 opcodes, 0.03%)</title><rect x="88.1932%" y="109" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="123848" fg:w="48"/><text x="88.4432%" y="123.50"></text></g><g><title>acir::arithmetic (12 opcodes, 0.01%)</title><rect x="88.2274%" y="109" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="123896" fg:w="12"/><text x="88.4774%" y="123.50"></text></g><g><title>acir::blackbox::range (6 opcodes, 0.00%)</title><rect x="88.2360%" y="109" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="123908" fg:w="6"/><text x="88.4860%" y="123.50"></text></g><g><title>main.nr:78:22::0x80 (21 opcodes, 0.01%)</title><rect x="88.2274%" y="133" width="0.0150%" height="23" fill="rgb(255,248,248)" fg:x="123896" fg:w="21"/><text x="88.4774%" y="147.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="88.2402%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="123914" fg:w="3"/><text x="88.4902%" y="123.50"></text></g><g><title>acir::arithmetic (1,605 opcodes, 1.14%)</title><rect x="88.2424%" y="109" width="1.1429%" height="23" fill="rgb(255,234,234)" fg:x="123917" fg:w="1605"/><text x="88.4924%" y="123.50"></text></g><g><title>acir::memory::init (3 opcodes, 0.00%)</title><rect x="89.3853%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="125522" fg:w="3"/><text x="89.6353%" y="123.50"></text></g><g><title>main.nr:78:5::encoded[index] (3,210 opcodes, 2.29%)</title><rect x="88.2424%" y="133" width="2.2859%" height="23" fill="rgb(255,227,227)" fg:x="123917" fg:w="3210"/><text x="88.4924%" y="147.50">m..</text></g><g><title>acir::memory::op (1,602 opcodes, 1.14%)</title><rect x="89.3874%" y="109" width="1.1408%" height="23" fill="rgb(255,234,234)" fg:x="125525" fg:w="1602"/><text x="89.6374%" y="123.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="90.5282%" y="109" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="127127" fg:w="6"/><text x="90.7782%" y="123.50"></text></g><g><title>main.nr:79:5::index += 1 (9 opcodes, 0.01%)</title><rect x="90.5282%" y="133" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="127127" fg:w="9"/><text x="90.7782%" y="147.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="90.5325%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="127133" fg:w="3"/><text x="90.7825%" y="123.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="90.5347%" y="85" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="127136" fg:w="6"/><text x="90.7847%" y="99.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="90.5389%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="127142" fg:w="3"/><text x="90.7889%" y="99.50"></text></g><g><title>keccak256.nr:13:12::N &gt;= message_size (12 opcodes, 0.01%)</title><rect x="90.5347%" y="109" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="127136" fg:w="12"/><text x="90.7847%" y="123.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="90.5411%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="127145" fg:w="3"/><text x="90.7911%" y="99.50"></text></g><g><title>acir::arithmetic (1,596 opcodes, 1.14%)</title><rect x="90.5432%" y="85" width="1.1365%" height="23" fill="rgb(255,234,234)" fg:x="127148" fg:w="1596"/><text x="90.7932%" y="99.50"></text></g><g><title>acir::blackbox::range (3,192 opcodes, 2.27%)</title><rect x="91.6797%" y="85" width="2.2731%" height="23" fill="rgb(255,227,227)" fg:x="128744" fg:w="3192"/><text x="91.9297%" y="99.50">a..</text></g><g><title>keccak256.nr:24:16::i &lt; message_size (6,384 opcodes, 4.55%)</title><rect x="90.5432%" y="109" width="4.5461%" height="23" fill="rgb(255,218,218)" fg:x="127148" fg:w="6384"/><text x="90.7932%" y="123.50">kecca..</text></g><g><title>acir::brillig_call(2) (1,596 opcodes, 1.14%)</title><rect x="93.9528%" y="85" width="1.1365%" height="23" fill="rgb(255,234,234)" fg:x="131936" fg:w="1596"/><text x="94.2028%" y="99.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="95.0893%" y="85" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="133532" fg:w="6"/><text x="95.3393%" y="99.50"></text></g><g><title>acir::blackbox::range (9 opcodes, 0.01%)</title><rect x="95.0936%" y="85" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="133538" fg:w="9"/><text x="95.3436%" y="99.50"></text></g><g><title>keccak256.nr:33:27::(message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES (18 opcodes, 0.01%)</title><rect x="95.0893%" y="109" width="0.0128%" height="23" fill="rgb(255,248,248)" fg:x="133532" fg:w="18"/><text x="95.3393%" y="123.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="95.1000%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="133547" fg:w="3"/><text x="95.3500%" y="99.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="95.1021%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="133550" fg:w="3"/><text x="95.3521%" y="99.50"></text></g><g><title>keccak256.nr:33:28::message_size + BLOCK_SIZE_IN_BYTES (6 opcodes, 0.00%)</title><rect x="95.1021%" y="109" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="133550" fg:w="6"/><text x="95.3521%" y="123.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="95.1043%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="133553" fg:w="3"/><text x="95.3543%" y="99.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="95.1064%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="133556" fg:w="3"/><text x="95.3564%" y="99.50"></text></g><g><title>keccak256.nr:34:29::real_max_blocks * BLOCK_SIZE_IN_BYTES (6 opcodes, 0.00%)</title><rect x="95.1064%" y="109" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="133556" fg:w="6"/><text x="95.3564%" y="123.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="95.1085%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="133559" fg:w="3"/><text x="95.3585%" y="99.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="95.1107%" y="85" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="133562" fg:w="6"/><text x="95.3607%" y="99.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="95.1149%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="133568" fg:w="3"/><text x="95.3649%" y="99.50"></text></g><g><title>keccak256.nr:36:33::1 (12 opcodes, 0.01%)</title><rect x="95.1107%" y="109" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="133562" fg:w="12"/><text x="95.3607%" y="123.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="95.1171%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="133571" fg:w="3"/><text x="95.3671%" y="99.50"></text></g><g><title>acir::arithmetic (1,596 opcodes, 1.14%)</title><rect x="95.1192%" y="85" width="1.1365%" height="23" fill="rgb(255,234,234)" fg:x="133574" fg:w="1596"/><text x="95.3692%" y="99.50"></text></g><g><title>acir::memory::init (3 opcodes, 0.00%)</title><rect x="96.2557%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135170" fg:w="3"/><text x="96.5057%" y="99.50"></text></g><g><title>keccak256.nr:36:5::block_bytes[message_size] (1,602 opcodes, 1.14%)</title><rect x="95.1192%" y="109" width="1.1408%" height="23" fill="rgb(255,234,234)" fg:x="133574" fg:w="1602"/><text x="95.3692%" y="123.50"></text></g><g><title>acir::memory::op (3 opcodes, 0.00%)</title><rect x="96.2579%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135173" fg:w="3"/><text x="96.5079%" y="99.50"></text></g><g><title>keccak256.nr:37:17::real_blocks_bytes - 1 (3 opcodes, 0.00%)</title><rect x="96.2600%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135176" fg:w="3"/><text x="96.5100%" y="123.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="96.2600%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135176" fg:w="3"/><text x="96.5100%" y="99.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="96.2621%" y="85" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="135179" fg:w="6"/><text x="96.5121%" y="99.50"></text></g><g><title>acir::blackbox::range (3 opcodes, 0.00%)</title><rect x="96.2664%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135185" fg:w="3"/><text x="96.5164%" y="99.50"></text></g><g><title>keccak256.nr:37:42::0x80 (12 opcodes, 0.01%)</title><rect x="96.2621%" y="109" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="135179" fg:w="12"/><text x="96.5121%" y="123.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="96.2686%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135188" fg:w="3"/><text x="96.5186%" y="99.50"></text></g><g><title>keccak256.nr:37:5::block_bytes[real_blocks_bytes - 1] (3 opcodes, 0.00%)</title><rect x="96.2707%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135191" fg:w="3"/><text x="96.5207%" y="123.50"></text></g><g><title>acir::memory::op (3 opcodes, 0.00%)</title><rect x="96.2707%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="135191" fg:w="3"/><text x="96.5207%" y="99.50"></text></g><g><title>acir::arithmetic (12 opcodes, 0.01%)</title><rect x="96.2728%" y="85" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="135194" fg:w="12"/><text x="96.5228%" y="99.50"></text></g><g><title>keccak256.nr:48:28::block_bytes[limb_start + k] (1,644 opcodes, 1.17%)</title><rect x="96.2728%" y="109" width="1.1707%" height="23" fill="rgb(255,233,233)" fg:x="135194" fg:w="1644"/><text x="96.5228%" y="123.50"></text></g><g><title>acir::memory::op (1,632 opcodes, 1.16%)</title><rect x="96.2814%" y="85" width="1.1622%" height="23" fill="rgb(255,233,233)" fg:x="135206" fg:w="1632"/><text x="96.5314%" y="99.50"></text></g><g><title>acir::arithmetic (1,020 opcodes, 0.73%)</title><rect x="97.4435%" y="85" width="0.7264%" height="23" fill="rgb(255,237,237)" fg:x="136838" fg:w="1020"/><text x="97.6935%" y="99.50"></text></g><g><title>acir::blackbox::range (816 opcodes, 0.58%)</title><rect x="98.1699%" y="85" width="0.5811%" height="23" fill="rgb(255,238,238)" fg:x="137858" fg:w="816"/><text x="98.4199%" y="99.50"></text></g><g><title>acir::brillig_call(2) (204 opcodes, 0.15%)</title><rect x="98.7510%" y="85" width="0.1453%" height="23" fill="rgb(255,244,244)" fg:x="138674" fg:w="204"/><text x="99.0010%" y="99.50"></text></g><g><title>keccak256.nr:52:28::sliced as u64 (2,244 opcodes, 1.60%)</title><rect x="97.4435%" y="109" width="1.5980%" height="23" fill="rgb(255,231,231)" fg:x="136838" fg:w="2244"/><text x="97.6935%" y="123.50"></text></g><g><title>acir::brillig_call(3) (204 opcodes, 0.15%)</title><rect x="98.8962%" y="85" width="0.1453%" height="23" fill="rgb(255,244,244)" fg:x="138878" fg:w="204"/><text x="99.1462%" y="99.50"></text></g><g><title>acir::blackbox::keccakf1600 (3 opcodes, 0.00%)</title><rect x="99.0415%" y="61" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="139082" fg:w="3"/><text x="99.2915%" y="75.50"></text></g><g><title>keccak256.nr:79:17::keccakf1600(state) (6 opcodes, 0.00%)</title><rect x="99.0415%" y="109" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="139082" fg:w="6"/><text x="99.2915%" y="123.50"></text></g><g><title>mod.nr:23:9::super::keccakf1600(input) (6 opcodes, 0.00%)</title><rect x="99.0415%" y="85" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="139082" fg:w="6"/><text x="99.2915%" y="99.50"></text></g><g><title>acir::memory::init (3 opcodes, 0.00%)</title><rect x="99.0436%" y="61" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="139085" fg:w="3"/><text x="99.2936%" y="75.50"></text></g><g><title>acir::arithmetic (9 opcodes, 0.01%)</title><rect x="99.0458%" y="85" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="139088" fg:w="9"/><text x="99.2958%" y="99.50"></text></g><g><title>acir::blackbox::range (18 opcodes, 0.01%)</title><rect x="99.0522%" y="85" width="0.0128%" height="23" fill="rgb(255,248,248)" fg:x="139097" fg:w="18"/><text x="99.3022%" y="99.50"></text></g><g><title>keccak256.nr:81:16::i &lt; real_max_blocks (36 opcodes, 0.03%)</title><rect x="99.0458%" y="109" width="0.0256%" height="23" fill="rgb(255,247,247)" fg:x="139088" fg:w="36"/><text x="99.2958%" y="123.50"></text></g><g><title>acir::brillig_call(2) (9 opcodes, 0.01%)</title><rect x="99.0650%" y="85" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="139115" fg:w="9"/><text x="99.3150%" y="99.50"></text></g><g><title>acir::arithmetic (51 opcodes, 0.04%)</title><rect x="99.0714%" y="85" width="0.0363%" height="23" fill="rgb(255,247,247)" fg:x="139124" fg:w="51"/><text x="99.3214%" y="99.50"></text></g><g><title>acir::memory::init (3 opcodes, 0.00%)</title><rect x="99.1077%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="139175" fg:w="3"/><text x="99.3577%" y="99.50"></text></g><g><title>keccak256.nr:83:21::state[j] (156 opcodes, 0.11%)</title><rect x="99.0714%" y="109" width="0.1111%" height="23" fill="rgb(255,245,245)" fg:x="139124" fg:w="156"/><text x="99.3214%" y="123.50"></text></g><g><title>acir::memory::op (102 opcodes, 0.07%)</title><rect x="99.1099%" y="85" width="0.0726%" height="23" fill="rgb(255,246,246)" fg:x="139178" fg:w="102"/><text x="99.3599%" y="99.50"></text></g><g><title>acir::arithmetic (102 opcodes, 0.07%)</title><rect x="99.1825%" y="85" width="0.0726%" height="23" fill="rgb(255,246,246)" fg:x="139280" fg:w="102"/><text x="99.4325%" y="99.50"></text></g><g><title>keccak256.nr:83:32::state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j] (255 opcodes, 0.18%)</title><rect x="99.1825%" y="109" width="0.1816%" height="23" fill="rgb(255,243,243)" fg:x="139280" fg:w="255"/><text x="99.4325%" y="123.50"></text></g><g><title>acir::blackbox::xor (153 opcodes, 0.11%)</title><rect x="99.2551%" y="85" width="0.1090%" height="23" fill="rgb(255,245,245)" fg:x="139382" fg:w="153"/><text x="99.5051%" y="99.50"></text></g><g><title>keccak256.nr:83:32::state[j] (48 opcodes, 0.03%)</title><rect x="99.3641%" y="109" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="139535" fg:w="48"/><text x="99.6141%" y="123.50"></text></g><g><title>acir::memory::op (48 opcodes, 0.03%)</title><rect x="99.3641%" y="85" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="139535" fg:w="48"/><text x="99.6141%" y="99.50"></text></g><g><title>acir::arithmetic (48 opcodes, 0.03%)</title><rect x="99.3983%" y="61" width="0.0342%" height="23" fill="rgb(255,247,247)" fg:x="139583" fg:w="48"/><text x="99.6483%" y="75.50"></text></g><g><title>acir::blackbox::keccakf1600 (9 opcodes, 0.01%)</title><rect x="99.4324%" y="61" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="139631" fg:w="9"/><text x="99.6824%" y="75.50"></text></g><g><title>keccak256.nr:85:25::keccakf1600(state) (132 opcodes, 0.09%)</title><rect x="99.3983%" y="109" width="0.0940%" height="23" fill="rgb(255,245,245)" fg:x="139583" fg:w="132"/><text x="99.6483%" y="123.50"></text></g><g><title>mod.nr:23:9::super::keccakf1600(input) (132 opcodes, 0.09%)</title><rect x="99.3983%" y="85" width="0.0940%" height="23" fill="rgb(255,245,245)" fg:x="139583" fg:w="132"/><text x="99.6483%" y="99.50"></text></g><g><title>acir::memory::op (75 opcodes, 0.05%)</title><rect x="99.4389%" y="61" width="0.0534%" height="23" fill="rgb(255,246,246)" fg:x="139640" fg:w="75"/><text x="99.6889%" y="75.50"></text></g><g><title>acir::arithmetic (12 opcodes, 0.01%)</title><rect x="99.4923%" y="37" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="139715" fg:w="12"/><text x="99.7423%" y="51.50"></text></g><g><title>acir::blackbox::range (96 opcodes, 0.07%)</title><rect x="99.5008%" y="37" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="139727" fg:w="96"/><text x="99.7508%" y="51.50"></text></g><g><title>main.nr:132:25::calculate_branch_hash(nodes[i]) (138,025 opcodes, 98.29%)</title><rect x="1.2889%" y="157" width="98.2888%" height="23" fill="rgb(255,101,101)" fg:x="1810" fg:w="138025"/><text x="1.5389%" y="171.50">main.nr:132:25::calculate_branch_hash(nodes[i])</text></g><g><title>main.nr:90:5::keccak256::keccak256(encoded, index) (12,699 opcodes, 9.04%)</title><rect x="90.5347%" y="133" width="9.0431%" height="23" fill="rgb(255,204,204)" fg:x="127136" fg:w="12699"/><text x="90.7847%" y="147.50">main.nr:90:5:..</text></g><g><title>keccak256.nr:94:32::lane.to_le_bytes (120 opcodes, 0.09%)</title><rect x="99.4923%" y="109" width="0.0855%" height="23" fill="rgb(255,245,245)" fg:x="139715" fg:w="120"/><text x="99.7423%" y="123.50"></text></g><g><title>mod.nr:101:21::self.to_le_radix (120 opcodes, 0.09%)</title><rect x="99.4923%" y="85" width="0.0855%" height="23" fill="rgb(255,245,245)" fg:x="139715" fg:w="120"/><text x="99.7423%" y="99.50"></text></g><g><title>mod.nr:165:9::__to_le_radix(self, radix) (120 opcodes, 0.09%)</title><rect x="99.4923%" y="61" width="0.0855%" height="23" fill="rgb(255,245,245)" fg:x="139715" fg:w="120"/><text x="99.7423%" y="75.50"></text></g><g><title>acir::brillig_call(4) (12 opcodes, 0.01%)</title><rect x="99.5692%" y="37" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="139823" fg:w="12"/><text x="99.8192%" y="51.50"></text></g><g><title>main.nr:133:24::h == parent (224 opcodes, 0.16%)</title><rect x="99.5777%" y="157" width="0.1595%" height="23" fill="rgb(255,244,244)" fg:x="139835" fg:w="224"/><text x="99.8277%" y="171.50"></text></g><g><title>acir::arithmetic (224 opcodes, 0.16%)</title><rect x="99.5777%" y="133" width="0.1595%" height="23" fill="rgb(255,244,244)" fg:x="139835" fg:w="224"/><text x="99.8277%" y="147.50"></text></g><g><title>acir::arithmetic (9 opcodes, 0.01%)</title><rect x="99.7372%" y="133" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="140059" fg:w="9"/><text x="99.9872%" y="147.50"></text></g><g><title>acir::blackbox::range (10 opcodes, 0.01%)</title><rect x="99.7436%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="140068" fg:w="10"/><text x="99.9936%" y="147.50"></text></g><g><title>main.nr:134:46::prefix_length_limb/2 (23 opcodes, 0.02%)</title><rect x="99.7372%" y="157" width="0.0164%" height="23" fill="rgb(255,248,248)" fg:x="140059" fg:w="23"/><text x="99.9872%" y="171.50"></text></g><g><title>acir::brillig_call(2) (4 opcodes, 0.00%)</title><rect x="99.7508%" y="133" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="140078" fg:w="4"/><text x="100.0008%" y="147.50"></text></g><g><title>acir::arithmetic (2 opcodes, 0.00%)</title><rect x="99.7536%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140082" fg:w="2"/><text x="100.0036%" y="147.50"></text></g><g><title>acir::memory::init (1 opcodes, 0.00%)</title><rect x="99.7550%" y="133" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="140084" fg:w="1"/><text x="100.0050%" y="147.50"></text></g><g><title>main.nr:135:33::addressHash[prefix_length_byte] (5 opcodes, 0.00%)</title><rect x="99.7536%" y="157" width="0.0036%" height="23" fill="rgb(255,249,249)" fg:x="140082" fg:w="5"/><text x="100.0036%" y="171.50"></text></g><g><title>acir::memory::op (2 opcodes, 0.00%)</title><rect x="99.7557%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140085" fg:w="2"/><text x="100.0057%" y="147.50"></text></g><g><title>acir::arithmetic (4 opcodes, 0.00%)</title><rect x="99.7572%" y="133" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="140087" fg:w="4"/><text x="100.0072%" y="147.50"></text></g><g><title>main.nr:136:20::prefix_length_limb % 2 == 0 (6 opcodes, 0.00%)</title><rect x="99.7572%" y="157" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="140087" fg:w="6"/><text x="100.0072%" y="171.50"></text></g><g><title>acir::brillig_call(3) (2 opcodes, 0.00%)</title><rect x="99.7600%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140091" fg:w="2"/><text x="100.0100%" y="147.50"></text></g><g><title>acir::arithmetic (2 opcodes, 0.00%)</title><rect x="99.7614%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140093" fg:w="2"/><text x="100.0114%" y="147.50"></text></g><g><title>acir::blackbox::range (4 opcodes, 0.00%)</title><rect x="99.7629%" y="133" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="140095" fg:w="4"/><text x="100.0129%" y="147.50"></text></g><g><title>main.nr:136:20::prefix_length_limb % 2 (8 opcodes, 0.01%)</title><rect x="99.7614%" y="157" width="0.0057%" height="23" fill="rgb(255,248,248)" fg:x="140093" fg:w="8"/><text x="100.0114%" y="171.50"></text></g><g><title>acir::brillig_call(2) (2 opcodes, 0.00%)</title><rect x="99.7657%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140099" fg:w="2"/><text x="100.0157%" y="147.50"></text></g><g><title>acir::arithmetic (16 opcodes, 0.01%)</title><rect x="99.7671%" y="133" width="0.0114%" height="23" fill="rgb(255,248,248)" fg:x="140101" fg:w="16"/><text x="100.0171%" y="147.50"></text></g><g><title>acir::blackbox::range (9 opcodes, 0.01%)</title><rect x="99.7785%" y="133" width="0.0064%" height="23" fill="rgb(255,248,248)" fg:x="140117" fg:w="9"/><text x="100.0285%" y="147.50"></text></g><g><title>main.nr:137:29::index &gt;&gt; 4 (28 opcodes, 0.02%)</title><rect x="99.7671%" y="157" width="0.0199%" height="23" fill="rgb(255,247,247)" fg:x="140101" fg:w="28"/><text x="100.0171%" y="171.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="99.7849%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140126" fg:w="3"/><text x="100.0349%" y="147.50"></text></g><g><title>acir::arithmetic (6 opcodes, 0.00%)</title><rect x="99.7871%" y="133" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="140129" fg:w="6"/><text x="100.0371%" y="147.50"></text></g><g><title>main.nr:139:29::index - (index &gt;&gt; 4) * 0x10 (8 opcodes, 0.01%)</title><rect x="99.7871%" y="157" width="0.0057%" height="23" fill="rgb(255,248,248)" fg:x="140129" fg:w="8"/><text x="100.0371%" y="171.50"></text></g><g><title>acir::blackbox::range (2 opcodes, 0.00%)</title><rect x="99.7914%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140135" fg:w="2"/><text x="100.0414%" y="147.50"></text></g><g><title>acir::arithmetic (2 opcodes, 0.00%)</title><rect x="99.7928%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140137" fg:w="2"/><text x="100.0428%" y="147.50"></text></g><g><title>main.nr:139:37::(index &gt;&gt; 4) * 0x10 (4 opcodes, 0.00%)</title><rect x="99.7928%" y="157" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="140137" fg:w="4"/><text x="100.0428%" y="171.50"></text></g><g><title>acir::blackbox::range (2 opcodes, 0.00%)</title><rect x="99.7942%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140139" fg:w="2"/><text x="100.0442%" y="147.50"></text></g><g><title>acir::arithmetic (12 opcodes, 0.01%)</title><rect x="99.7956%" y="133" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="140141" fg:w="12"/><text x="100.0456%" y="147.50"></text></g><g><title>acir::blackbox::range (6 opcodes, 0.00%)</title><rect x="99.8042%" y="133" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="140153" fg:w="6"/><text x="100.0542%" y="147.50"></text></g><g><title>main.nr:139:38::index &gt;&gt; 4 (20 opcodes, 0.01%)</title><rect x="99.7956%" y="157" width="0.0142%" height="23" fill="rgb(255,248,248)" fg:x="140141" fg:w="20"/><text x="100.0456%" y="171.50"></text></g><g><title>acir::brillig_call(2) (2 opcodes, 0.00%)</title><rect x="99.8084%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140159" fg:w="2"/><text x="100.0584%" y="147.50"></text></g><g><title>acir::arithmetic (66 opcodes, 0.05%)</title><rect x="99.8099%" y="133" width="0.0470%" height="23" fill="rgb(255,246,246)" fg:x="140161" fg:w="66"/><text x="100.0599%" y="147.50"></text></g><g><title>acir::memory::init (2 opcodes, 0.00%)</title><rect x="99.8569%" y="133" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140227" fg:w="2"/><text x="100.1069%" y="147.50"></text></g><g><title>main.nr:141:26::nodes[i].rows[index] (132 opcodes, 0.09%)</title><rect x="99.8099%" y="157" width="0.0940%" height="23" fill="rgb(255,245,245)" fg:x="140161" fg:w="132"/><text x="100.0599%" y="171.50"></text></g><g><title>acir::memory::op (64 opcodes, 0.05%)</title><rect x="99.8583%" y="133" width="0.0456%" height="23" fill="rgb(255,246,246)" fg:x="140229" fg:w="64"/><text x="100.1083%" y="147.50"></text></g><g><title>acir::arithmetic (7 opcodes, 0.00%)</title><rect x="99.9039%" y="133" width="0.0050%" height="23" fill="rgb(255,248,248)" fg:x="140293" fg:w="7"/><text x="100.1539%" y="147.50"></text></g><g><title>acir::blackbox::range (6 opcodes, 0.00%)</title><rect x="99.9089%" y="133" width="0.0043%" height="23" fill="rgb(255,249,249)" fg:x="140300" fg:w="6"/><text x="100.1589%" y="147.50"></text></g><g><title>main.nr:141:26::nodes[i] (16 opcodes, 0.01%)</title><rect x="99.9039%" y="157" width="0.0114%" height="23" fill="rgb(255,248,248)" fg:x="140293" fg:w="16"/><text x="100.1539%" y="171.50"></text></g><g><title>acir::brillig_call(2) (3 opcodes, 0.00%)</title><rect x="99.9131%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140306" fg:w="3"/><text x="100.1631%" y="147.50"></text></g><g><title>acir::arithmetic (1 opcodes, 0.00%)</title><rect x="99.9153%" y="133" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="140309" fg:w="1"/><text x="100.1653%" y="147.50"></text></g><g><title>main.nr:142:17::prefix_length_limb += 1 (2 opcodes, 0.00%)</title><rect x="99.9153%" y="157" width="0.0014%" height="23" fill="rgb(255,249,249)" fg:x="140309" fg:w="2"/><text x="100.1653%" y="171.50"></text></g><g><title>acir::blackbox::range (1 opcodes, 0.00%)</title><rect x="99.9160%" y="133" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="140310" fg:w="1"/><text x="100.1660%" y="147.50"></text></g><g><title>main.nr:143:17::h.for_each (96 opcodes, 0.07%)</title><rect x="99.9167%" y="157" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="140311" fg:w="96"/><text x="100.1667%" y="171.50"></text></g><g><title>mod.nr:93:13::f(self[i]) (96 opcodes, 0.07%)</title><rect x="99.9167%" y="133" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="140311" fg:w="96"/><text x="100.1667%" y="147.50"></text></g><g><title>main.nr:144:21::print(f&quot;{x}, &quot;) (96 opcodes, 0.07%)</title><rect x="99.9167%" y="109" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="140311" fg:w="96"/><text x="100.1667%" y="123.50"></text></g><g><title>lib.nr:47:9::print_unconstrained(false, input) (96 opcodes, 0.07%)</title><rect x="99.9167%" y="85" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="140311" fg:w="96"/><text x="100.1667%" y="99.50"></text></g><g><title>acir::brillig_call(0) (96 opcodes, 0.07%)</title><rect x="99.9167%" y="61" width="0.0684%" height="23" fill="rgb(255,246,246)" fg:x="140311" fg:w="96"/><text x="100.1667%" y="75.50"></text></g><g><title>main.nr:146:17::println(&quot;&quot;) (3 opcodes, 0.00%)</title><rect x="99.9850%" y="157" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140407" fg:w="3"/><text x="100.2350%" y="171.50"></text></g><g><title>lib.nr:40:9::print_unconstrained(true, input) (3 opcodes, 0.00%)</title><rect x="99.9850%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140407" fg:w="3"/><text x="100.2350%" y="147.50"></text></g><g><title>acir::brillig_call(1) (3 opcodes, 0.00%)</title><rect x="99.9850%" y="109" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140407" fg:w="3"/><text x="100.2350%" y="123.50"></text></g><g><title>acir::arithmetic (12 opcodes, 0.01%)</title><rect x="99.9872%" y="133" width="0.0085%" height="23" fill="rgb(255,248,248)" fg:x="140410" fg:w="12"/><text x="100.2372%" y="147.50"></text></g><g><title>main.nr:147:23::nodes[i].node_type == 1 (15 opcodes, 0.01%)</title><rect x="99.9872%" y="157" width="0.0107%" height="23" fill="rgb(255,248,248)" fg:x="140410" fg:w="15"/><text x="100.2372%" y="171.50"></text></g><g><title>acir::brillig_call(3) (3 opcodes, 0.00%)</title><rect x="99.9957%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140422" fg:w="3"/><text x="100.2457%" y="147.50"></text></g><g><title>all (140,428 opcodes, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="23" fill="rgb(255,100,100)" fg:x="0" fg:w="140428"/><text x="0.2500%" y="195.50"></text></g><g><title>main.nr:150:24::false (3 opcodes, 0.00%)</title><rect x="99.9979%" y="157" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140425" fg:w="3"/><text x="100.2479%" y="171.50"></text></g><g><title>acir::arithmetic (3 opcodes, 0.00%)</title><rect x="99.9979%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="140425" fg:w="3"/><text x="100.2479%" y="147.50"></text></g></svg></svg>